const createCsvWriter = require("csv-writer").createObjectCsvWriter;

const scraperObject = {
  url: "https://samakal.com/health",
  async scraper(browser) {
    let page = await browser.newPage();
    let countNumber = 0;
    console.log(`Navigating to ${this.url}...`);
    // Navigate to the selected page
    await page.goto(this.url);
    // Wait for the required DOM to be rendered
    await page.waitForSelector("nav");

    let data = [];

    // Function to scrape data from a page
    const scrapePage = async (link) => {
      let dataObj = {};
      let newPage = await browser.newPage();
      await newPage.goto(link, { timeout: 60000 });
      await newPage.waitForSelector(".detail-top:first-child > h1");
      console.log(countNumber++);

      // Scrape all h3 elements
      dataObj["blogTitles"] = await newPage.$eval(
        ".detail-top:first-child > h1",
        (element) => element.textContent
      );

      // Scrape all p elements
      dataObj["blogContent"] = await newPage.$$eval(
        ".contentBody > .description p",
        (elements) => elements.map((el) => el.textContent)
      );

      await newPage.close();
      return dataObj;
    };
    // Function to select the "2021" option from the dropdown
    // const selectYear = async () => {
    //   await page.select(".form-select", "2016");
    //   // Wait for the page to reload with the selected year's content (adjust the wait time as needed)
    //   await page.waitForTimeout(2000);
    // };

    // Function to load more blogs by clicking the ".more" button
    // Function to load more blogs by clicking the ".more" button
    const loadMoreBlogs = async () => {
      let hasMoreButton = true;
      let previousLinkCount = 0;

      while (hasMoreButton) {
        const moreButton = await page.$(".customNewPagination a");
        if (moreButton) {
          try {
            await moreButton.click();
            await page.waitForTimeout(2000); // Wait for the new content to load (adjust the wait time as needed)

            // Get the links after clicking the "Load More" button
            let updatedUrls = await page.evaluate(() => {
              const links = [];
              const linkElements = document.querySelectorAll(
                ".categoryPageListNews a"
              );
              linkElements.forEach((el) => {
                links.push(el.href);
              });
              return links;
            });

            if (updatedUrls.length === previousLinkCount) {
              // No new links added, break from the loop
              hasMoreButton = false;
            } else {
              // Update the previous link count
              previousLinkCount = updatedUrls.length;
            }
          } catch (error) {
            // Handle the error when the "more" button is not clickable
            hasMoreButton = false;
          }
        } else {
          hasMoreButton = false;
        }
      }
    };

    // Select the year "2021" from the dropdown
    // await selectYear();

    // Load more blogs and scrape data
    await loadMoreBlogs();

    // Get the links to all the required blogs
    let urls = await page.evaluate(() => {
      const links = [];
      const linkElements = document.querySelectorAll(".categoryPageListNews a");
      linkElements.forEach((el) => {
        links.push(el.href);
      });
      return links;
    });
    console.log(urls);

    // Scrape data from each blog page
    for (let link of urls) {
      let currentPageData = await scrapePage(link);
      data.push(currentPageData);
    }

    // Define CSV writer and write the data to a CSV file
    const csvWriter = createCsvWriter({
      path: "scraped_data.csv",
      header: [
        { id: "blogTitles", title: "Blog Titles" },
        { id: "blogContent", title: "Blog Content" },
      ],
    });

    csvWriter
      .writeRecords(data)
      .then(() => console.log("CSV file written successfully"))
      .catch((error) => console.error("Error writing CSV file:", error));
  },
};

module.exports = scraperObject;
